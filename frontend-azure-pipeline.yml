trigger:
 branches:
    include:
    - main
    - feature/*
 paths:
    include:
    - client
    - cicd

pool:
  vmImage: ubuntu-latest

stages:
  - stage: build

    jobs:
      - job: build
        steps:
        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: '3.1.x'
          displayName: 'Set SDK to 3.1.x'

        - task: DotNetCoreCLI@2
          inputs:
            command: 'build'
            projects: '$(Build.SourcesDirectory)/client/client.csproj'
          displayName: 'Build client'

        - task: DotNetCoreCLI@2
          inputs:
            command: 'publish'
            publishWebProjects: false
            projects: '$(Build.SourcesDirectory)/client/client.csproj'
            arguments: '-o $(Build.ArtifactStagingDirectory)'
          displayName: 'dotnet publish'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(Build.SourcesDirectory)/infrastructure'
            artifact: 'infrastructure'
            publishLocation: 'pipeline'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

  - stage: prereqs

    jobs:
      - job: prereqs
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

        steps:
        
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'current'
            artifactName: 'infrastructure'
            targetPath: '$(System.DefaultWorkingDirectory)'

        - task: AzureResourceManagerTemplateDeployment@3
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: 'GitWatcher'
            subscriptionId: '$(SUBSCRIPTIONID)'
            action: 'Create Or Update Resource Group'
            resourceGroupName: 'azl-tfstate-shared-ukw-rg'
            location: 'UK South'
            templateLocation: 'Linked artifact'
            csmFile: '$(System.DefaultWorkingDirectory)/infrastructure/state-backend/state-backend.azuredeploy.json'
            deploymentMode: 'Incremental'

  - stage: dev

    variables:
      location: UKWest
      location_short_code: ukw
      shortcode: azl
      product: gitwatcher
      environment_name: dev
      backendAzureRmContainerName: tfstate
      backendAzureRmKey: devclient
      backendStorageAccount: tfstatedlm4lgkvg3eey
      resource_group_tfstate: azl-tfstate-shared-ukw-rg
          
    jobs:
      - job: dev
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

        steps:     

        - task: TerraformInstaller@0
          inputs:
            terraformVersion: '0.14.7'
        
        - task: replacetokens@3
          inputs:
            rootDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/client'
            targetFiles: '**/*.tfvars'
            encoding: 'auto'
            writeBOM: true
            actionOnMissing: 'warn'
            keepToken: false
            tokenPrefix: '__'
            tokenSuffix: '__'
            useLegacyPattern: false
            enableTransforms: false
            enableTelemetry: true

        - task: TerraformTaskV1@0
          displayName: 'Terraform Init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/client'
            backendServiceArm: 'GitWatcher'
            backendAzureRmResourceGroupName: '$(resource_group_tfstate)'
            backendAzureRmStorageAccountName: '$(backendStorageAccount)'
            backendAzureRmContainerName: '$(backendAzureRmContainerName)'
            backendAzureRmKey: '$(backendAzureRmKey)'

        - task: CmdLine@2
          inputs:
            script: 'terraform import azurerm_resource_group.rg /subscriptions/$(SUBSCRIPTIONID)/resourceGroups/azl-gitwatcher-dev-ukw-rg'
            workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/client'
            
        - task: TerraformTaskV1@0
          displayName: 'Terraform plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/client'
            commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/infrastructure/client/az-storage-account-client-variables.tfvars" --out=planfile'
            environmentServiceNameAzureRM: 'GitWatcher'
            backendServiceArm: 'GitWatcher'
            backendAzureRmResourceGroupName: '$(resource_group_tfstate)'
            backendAzureRmStorageAccountName: '$(backendStorageAccount)'
            backendAzureRmContainerName: $(backendAzureRmContainerName)
            backendAzureRmKey: '$(backendAzureRmKey)'

        - task: TerraformTaskV1@0
          displayName: 'Terraform apply'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/client'
            commandOptions: '-auto-approve planfile'
            environmentServiceNameAzureRM: 'GitWatcher'
            backendServiceArm: 'GitWatcher'
            backendAzureRmResourceGroupName: '$(resource_group_tfstate)'
            backendAzureRmStorageAccountName: '$(storageAccountName)'
            backendAzureRmContainerName: $(backendAzureRmContainerName)
            backendAzureRmKey: '$(backendAzureRmKey)'            